$('#result').removeClass('d-none')
$('#result').html('<%= j render partial: "result" %>')

$('#close_results').click(function() {
  $('#result').html("");
});

// Activate and clear results buttons
$('.result').removeClass('disabled')
$('.result').removeClass('active')

//Copy results
$('#copy_results').click(function() {
  // Get the text from the div
  let rawText = $('#copy_box').text();

  // Split the text into lines
  let lines = rawText.split('\n');

  // Trim leading spaces from each line
  let trimmedLines = lines.map(line => line.trimStart());

  // Rejoin the lines into a single string with newline characters
  let cleanedText = trimmedLines.join('\n');

  $('#result_card').addClass( "highlight", 250, callback )

  function callback() {
    setTimeout(function() {
      $('#result_card').removeClass( "highlight" );
    }, 250 );
  }

  navigator.clipboard.writeText(cleanedText)
});

$('.btn-results').click(function() {
  let data = $(this).data('results').split("_");
  let direction = data[0]
  let type = data[1]
  if (direction == "increase") {
    change = 1
  } else {
    change = -1
  }

  let results = {
      effect_good: "<%= t('missions.index.effect_good') %>",
      effect_bad: "<%= t('missions.index.effect_bad') %>",
      effect_neutral: "<%= t('missions.index.effect_neutral') %>",
      position_good: "<%= t('missions.index.position_good') %>",
      position_bad: "<%= t('missions.index.position_bad') %>",
      position_neutral: "<%= t('missions.index.position_neutral') %>"
  };

  let level = Math.max(-1, Math.min(1, (parseInt($('#' + type).data("level")) + change)));
  $('#' + type).data("level", level)

  $('.' + type + '_switch').addClass('d-none')
  if (level == -1) {
    $('.' + type).html(results[type + '_bad'])

    if (type == 'effect') {
      $('#' + type + '_extra').addClass('d-none')
      $('.improvement').addClass('text-decoration-line-through')
      $("#results_copy .improvement").each(function() {
          // Get the current text content
          var currentText = $(this).text();

          // Update the content with ~~ at the beginning and end
          $(this).text(`~~${currentText}~~ `);
      });
    }

    if (type == 'position') {
      $('#' + type + '_negative').removeClass('d-none')
      $('#results_copy').html($('#' + type + '_negative').text())
    }

  } else if (level == 0) {
    $('.' + type).html(results[type + '_neutral'])

    if (type == 'effect') {
      $('#' + type + '_extra').addClass('d-none')
      $('.improvement').removeClass('text-decoration-line-through')
      $("#results_copy .improvement").each(function() {
          // Get the current text content
          var currentText = $(this).text();

          // Remove leading and trailing ~~ using a regular expression
          var updatedText = currentText.replace(/^~~|~~ $/g, '');

          // Update the text content without the ~~ symbols
          $(this).text(updatedText);
      });
    }

    if (type == 'position') {
      $('#' + type + '_main').removeClass('d-none')
      $('#results_copy').html($('#' + type + '_main').text())
    }

  } else if (level == 1) {
    $('.' + type).html(results[type + '_good'])

    if (type == 'effect') {
      $('#' + type + '_extra').removeClass('d-none')
      $('.improvement').removeClass('text-decoration-line-through')
      $("#results_copy .improvement").each(function() {
          // Get the current text content
          var currentText = $(this).text();

          // Remove leading and trailing ~~ using a regular expression
          var updatedText = currentText.replace(/^~~|~~ $/g, '');

          // Update the text content without the ~~ symbols
          $(this).text(updatedText);
      });
    }

    if (type == 'position') {
      $('#' + type + '_positive').removeClass('d-none')
      $('#results_copy').html($('#' + type + '_positive').text())
    }
  }

  $('.' + type).addClass( "highlight", 250, callback )

  function callback() {
    setTimeout(function() {
      $('.' + type).removeClass( "highlight" );
    }, 250 );
  }
});
