$(document).on('turbolinks:load', function () {
  if ($(".map.index").length !== 0 || $(".map.full").length !== 0) {
    if ($('#map-container').data('loaded') == false) {

      var imgSize = <%= @options["imgSize"] %>
      var bounds = <%= @options["bounds"] %>
      var zoom = <%= @options["zoom"] %>

      function resizeMap() {
        var width = Math.min($('#map-container').width(), bounds[1][1] - bounds[0][1])
        var height = Math.min(window.innerHeight - 102, bounds[1][0] - bounds[0][0])
        $('#mapid').width(width);
        $('#mapid').height(height);
      }

      resizeMap();

      $(window).resize(function(){
        if ($('#map-container').hasClass('fs') ) {
          resizeMap();
        } else {
          resizeMap();
        }
      });

      var map = L.map('mapid', {
          crs: L.CRS.Simple, //CRS need to be removed for tile layer
          //drawControl: true,
          minZoom: zoom[0],
          maxZoom: zoom[1],
          maxBounds: bounds,
          maxBoundsViscosity: 1.0,
          fullscreenControl: true,
          fullscreenControlOptions: {
            position: 'topleft' }
      });

      var params = new URLSearchParams(document.location.search.substring(1));
      var x = params.get("x");
      var y = params.get("y");

      if (x == null || y == null) {
        map.setView( [bounds[1][0] / 2 , bounds[1][1] / 2 ], zoom[0]);
      } else {
        map.setView( [y, x], zoom[0]);
      }

      map.createPane('imagebg');
      map.getPane('imagebg').style.zIndex = 50;

      var baseImage = L.imageOverlay('<%= asset_path(@options["img"]) %>', [[0,0],imgSize], {opacity: 1, attribution: '<%= @options["attribution"].html_safe %>', pane: 'imagebg'}).addTo(map);

      const sideLength = <%= (@options["scale"] || 1 ) %>;

      var customTileLayer = L.GridLayer.extend({
          options: {
            bounds: bounds,
            tileSize: L.point(sideLength * 2 * 1.5, Math.sqrt(3) * sideLength * 2),
            maxNativeZoom: 0, // Define the minimum native zoom level
            minNativeZoom: 0
          },
          createTile: function (coords) {
              var tile = document.createElement('img');
              tile.src = "<%= asset_path('hex-tile.svg') %>";

              return tile;
          }
      });

      var hexLayer = new customTileLayer().addTo(map);

      <% @options["layers"].each do | code, layer | %>
        var <%= code %> = new L.layerGroup.collision({margin:-5});
        <% layer["types"].each do | type | %>
          <% if !layer["img"].nil? %>
            var imageOverlay = L.imageOverlay('<%= asset_path('map-fiskeyja-pol.png') %>', [[0,0],imgSize], {opacity: 0.5})
            imageOverlay.addTo(<%= code %>);
          <% end %>

          <% @locations.where(location_type: type).each do | location | %>
            var icon = '<%= @location_types[type]["icon"].nil? ? "" : asset_path(@location_types[type]["icon"]) %>'
            if (icon == "") {
              <%= code %>.addLayer(
                L.marker(
                  [<%= location.y %>,<%= location.x %>],
                    { icon: L.divIcon({
                      className: "region-label <%= @options['font'] %>",
                      html: "<%= location.name %>",
                      iconSize: [<%= location.name.length * 30 * 0.6 %>, 30],
                      iconAnchor: [<%= location.name.length * 30 * 0.6 * 0.5 %>, 15]
                      })
                    })
                    .bindPopup('<p><a href="<%= locations_path.to_s + '?id=' + location.id.to_s %>"><%= location.name %></a></p>' + '<%= j truncate(location&.description.to_s.gsub(/\n/, '<br>'), length: 100, omission: '...') %>' + '</p>')
                );
            } else {
              <%= code %>.addLayer(
                L.marker(
                  [<%= location.y %>,<%= location.x %>],
                    { icon: L.divIcon({
                      className: "divIconBox",
                      html: "<img src='" + icon + "' width='24' height='24'></div>",
                      iconSize: [120,24],
                      iconAnchor: [12, 12]
                      })
                    })
                    .bindPopup('<p><a href="<%= locations_path.to_s + '?id=' + location.id.to_s %>"><%= location.name %></a></p><p><%= location.family&.name %></p>', {
                        className: 'leaflet-popup'
                      })
                    .bindTooltip("<%= location.name %>", {permanent: true, className: "locationLabel <%= @options['font'] %>", style: "background-color:powderblue;", offset: [0, 0] })
                );
            }
          <% end %>
        <% end %>

        <% if layer["default"] != false %>
          <%= code %>.addTo(map);
        <% end %>
      <% end %>

      var drawnItems = new L.FeatureGroup();

      var overlays = {
        <% @options["layers"].sort_by { |_key, value| value["name"] }.each do | code, layer | %>
          <%= layer["name"] %>: <%= code %>,
        <% end %>
        "Rutas": drawnItems,
        "Grid": hexLayer
      }

      // Saving as image

      // Custom image size
      var fullMap = {
        width: bounds[1][1], // change depending on base map 1080
        height: bounds[1][0], // change depending on base map 1700
        className: 'fullMap',
        name: 'Mapa completo'
      }

      var printer = L.easyPrint({
            title: 'Exportar mapa',
            sizeModes: ['Current',fullMap],
            defaultSizeTitles: {Current: 'Zona visible'},
            filename: 'map',
            exportOnly: true,
            hideControlContainer: true
      }).addTo(map);

      map.on('easyPrint-start', e => {
        $('#printing').removeClass('invisible')
        if (e.event.target.className == 'fullMap') {
          map.setView( [(bounds[1][0] / 2), (bounds[1][1] / 2)], zoom[0]);
        }
      });

      map.on('easyPrint-finished', e => {
        $('#printing').addClass('invisible')
      });

      map.addLayer(drawnItems);

      // Set the button title text for the polygon button
      L.drawLocal.draw.toolbar.buttons.polyline = 'Dibuja tu ruta';
      L.drawLocal.draw.toolbar.buttons.marker = 'AÃ±ade tu marcador';

      // Set polyline colours array
      var colours = ['DarkRed','LimeGreen','SteelBlue','DarkMagenta','Gold','Black'];

      var poly = 0;
      var mark = 0;

      var drawControl = new L.Control.Draw({
        draw: {
          polyline: {
            showLength: false,
            shapeOptions: {
              className: 'route',
              showMeasurements: true,
              color: colours[ poly % colours.length],
              weight: 10
            }
          },
          polygon: false,
          rectangle: false,
          circle: false,
          marker: {icon: new L.DivIcon({
            iconAnchor: [10, 35], // point of the icon which will correspond to marker's location
            className: 'markerClass',
            html: '<div style="position:relative; text-align:center; width: 24px;"><div style="position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%); color: white;">' + String.fromCharCode(65 + mark ) + '</div><img src="/assets/marker.svg" style="width:100%""></div>'
          })}
        },
        edit: {
          featureGroup: drawnItems,
          edit: false
        }
      });

      map.addControl(drawControl);

      map.on('draw:created', function (e) {
        var type = e.layerType,
            layer = e.layer;
        drawnItems.addLayer(layer);
        (type == 'polyline') ? poly++ : '';
        (type == 'marker') ? mark++ : '';

        map.removeControl(drawControl);
        drawControl.setDrawingOptions({
          polyline: {
            showLength: false,
            shapeOptions: {
              className: 'route',
              showMeasurements: true,
              color: colours[ poly % colours.length],
              weight: 10
            }
          },
          marker: {
            icon: new L.DivIcon({
              iconAnchor: [10, 35], // point of the icon which will correspond to marker's location
              className: 'markerClass',
              html: '<div style="position:relative; text-align:center; width: 24px;"><div style="position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%); color: white;">' + String.fromCharCode(65 + mark ) + '</div><img src="/assets/marker.svg" style="width:100%""></div>'
            })
          }
        });
        map.addControl(drawControl);
      });

      <% if @current_user.is_master? %>
        // Debug coords
        map.on('click', function(e){
          var coord = e.latlng;
          var lat = coord.lat;
          var lng = coord.lng;
          console.log("You clicked the map at latitude: " + lat + " and longitude: " + lng);
        });

        // Debug grid
        L.GridLayer.GridDebug = L.GridLayer.extend({
          createTile: function (coords) {
            const tile = document.createElement('div');
            tile.style.outline = '1px solid green';
            tile.style.fontWeight = 'bold';
            tile.style.fontSize = '14pt';
            tile.innerHTML = [coords.z, coords.x, coords.y].join('/');
            return tile;
          },
        });

        L.gridLayer.gridDebug = function (opts) {
          return new L.GridLayer.GridDebug(opts);
        };

        overlays["Debug grid"] = L.gridLayer.gridDebug();
        overlays["Base"] = baseImage

        //map.addLayer(L.gridLayer.gridDebug());
      <% end %>

      var layerControl = L.control.layers(null, overlays)

      map.addControl(layerControl);

      $('#map-container').data('loaded', true);
  }
}
});
