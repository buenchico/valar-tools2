$(document).on('turbolinks:load', function () {
  if ($(".map.index").length !== 0 || $(".map.full").length !== 0) {
    if ($('#map-container').data('loaded') == false) {
      $(window).resize(function(){
        if ($('#map-container').hasClass('fs') ) {
          $('#mapid').height(window.innerHeight);
        } else {
          $('#mapid').height(window.innerHeight - $("#header").height() - 102);
        }
      });

      var bounds = <%= @options["bounds"] %> // mapa-westeros

      var map = L.map('mapid', {
          crs: L.CRS.Simple, //CRS need to be removed for tile layer
          //drawControl: true,
          minZoom: <%= @options["zoom"][0] %>,
          maxZoom: <%= @options["zoom"][1] %>,
          maxBounds: bounds,
          maxBoundsViscosity: 1.0,
          fullscreenControl: true,
          fullscreenControlOptions: {
            position: 'topleft' }
      });

      var params = new URLSearchParams(document.location.search.substring(1));
      var x = params.get("x");
      var y = params.get("y");

      if (x == null || y == null) {
        map.setView( [<%= @options["bounds"][1][0] / 2 %>, <%= @options["bounds"][1][1] / 2 %>], <%= @options["zoom"][0] %>);
      } else {
        map.setView( [y, x], <%= @options["zoom"][0] %>);
      }

      var image = L.imageOverlay('<%= "/assets/" + @options["img"].to_s %>', bounds, {opacity: 1, attribution: '<%= @options["attribution"].html_safe %>',}).addTo(map);

      <% @options["layers"].each do | code, layer | %>
        var <%= code %> = new L.layerGroup.collision({margin:0});
        <% layer["types"].each do | type | %>
          <% @locations.where(location_type: type).each do | location | %>
            <%= code %>.addLayer(
              L.marker(
                [<%= location.y %>,<%= location.x %>],
                  { icon: L.divIcon({
                    className: "divIconBox",
                    html: "<img src='/assets/marker.svg' width='24' height='24'></div>",
                    iconSize: [120,24],
                    iconAnchor: [12, 12]
                  })
                  })
                  .bindPopup('<p><%= location.name %></p><p><%= location.family.name %></p>')
                  .bindTooltip("<%= location.name %>", {permanent: true, className: "locationLabel <%= @options['font'] %>", style: "background-color:powderblue;", offset: [0, 0] })
              );
          <% end %>
        <% end %>
        <%= code %>.addTo(map);
      <% end %>

      var drawnItems = new L.FeatureGroup();

      function generateHexGrid(bounds, sideLength) {
        const hexagons = [];

        const minX = bounds[0][1];
        const minY = bounds[0][0];
        const maxX = bounds[1][1];
        const maxY = bounds[1][0];

        const hexWidth = sideLength * 2;
        const hexHeight = Math.sqrt(3) * sideLength;

        const horizontalSpacing = hexWidth * 0.75;
        const verticalSpacing = hexHeight;

        const numRows = (bounds[1][0] / sideLength);
        const numCols = (bounds[1][1] / sideLength);

        let rowOffset = 0;
        let colOffset = 0;

        for (let row = 0; row < numRows; row++) {

          for (let col = 0; col < numCols; col++) {
            if (col % 2 === 1) {
              rowOffset = hexHeight / 2;
            } else {
              rowOffset = 0;
            }

            const x = minX + col * horizontalSpacing + colOffset;
            const y = minY + row * verticalSpacing + rowOffset;

            const hexagon = {
              type: 'Feature',
              geometry: {
                type: 'MultiPolygon',
                coordinates: [
                  [
                    [
                      [x - (0.5 * hexWidth), y],
                      [x - (0.25 * hexWidth), y - (0.5 * hexHeight)],
                      [x + (0.25 * hexWidth), y - (0.5 * hexHeight)],
                      [x + (0.5 * hexWidth), y],
                      [x + (0.25 * hexWidth), y + (0.5 * hexHeight)],
                      [x - (0.25 * hexWidth), y + (0.5 * hexHeight)]
                    ]
                  ]
                ]
              }
            };

            hexagons.push(hexagon);
          }
        }


        return hexagons;
      }

      const sideLength = <%= (@options["scale"] || 1 ) %>;

      const hexGrid = generateHexGrid(bounds, sideLength);

      const jsonHex = {
        type: 'FeatureCollection',
        name: 'hex',
        crs: {
          type: 'name',
          properties: {
            name: 'urn:ogc:def:crs:OGC:1.3:CRS84'
          }
        },
        features: hexGrid
      };

      var layer_hex = new L.geoJson(jsonHex, {
        interactive: false,
        style: {
          color: 'rgba(0,0,0,0.3)',
          weight: 1.0
        }
      });
      map.addLayer(layer_hex);

      var overlays = {
        <% @options["layers"].sort_by { |_key, value| value["name"] }.each do | code, layer | %>
          <%= layer["name"] %>: <%= code %>,
        <% end %>
        "Rutas": drawnItems
      }

      var layerControl = L.control.layers(null, overlays)

      map.addControl(layerControl);

      // Saving as image

      // Custom image size
      var fullMap = {
        width: bounds[1][1], // change depending on base map 1080
        height: bounds[1][0], // change depending on base map 1700
        className: 'fullMap',
        name: 'Mapa completo'
      }

      var printer = L.easyPrint({
            title: 'Exportar mapa',
            sizeModes: ['Current',fullMap],
            defaultSizeTitles: {Current: 'Zona visible'},
            filename: 'map',
            exportOnly: true,
            hideControlContainer: true
      }).addTo(map);

      map.on('easyPrint-start', e => {
        $('#printing').removeClass('invisible')
        map.removeLayer(layer_hex)
        if (e.event.target.className == 'fullMap') {
          map.setView( [bounds[1][0] / 2, bounds[1][1] / 2], <%= @options["zoom"][0] %>);
        }
      });

      map.on('easyPrint-finished', e => {
        map.addLayer(layer_hex)
        $('#printing').addClass('invisible')
      });

      map.addLayer(drawnItems);

      // Set the button title text for the polygon button
      L.drawLocal.draw.toolbar.buttons.polyline = 'Dibuja tu ruta';
      L.drawLocal.draw.toolbar.buttons.marker = 'AÃ±ade tu marcador';

      // Set polyline colours array
      var colours = ['DarkRed','LimeGreen','SteelBlue','DarkMagenta','Gold','Black'];

      var poly = 0;
      var mark = 0;

      var drawControl = new L.Control.Draw({
        draw: {
          polyline: {
            showLength: false,
            shapeOptions: {
              className: 'route',
              showMeasurements: true,
              color: colours[ poly % colours.length],
              weight: 10
            }
          },
          polygon: false,
          rectangle: false,
          circle: false,
          marker: {icon: new L.DivIcon({
            iconAnchor: [10, 35], // point of the icon which will correspond to marker's location
            className: 'markerClass',
            html: '<div style="position:relative; text-align:center; width: 24px;"><div style="position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%); color: white;">' + String.fromCharCode(65 + mark ) + '</div><img src="/assets/marker.svg" style="width:100%""></div>'
          })}
        },
        edit: {
          featureGroup: drawnItems,
          edit: false
        }
      });

      map.addControl(drawControl);

      map.on('draw:created', function (e) {
        var type = e.layerType,
            layer = e.layer;
        drawnItems.addLayer(layer);
        (type == 'polyline') ? poly++ : '';
        (type == 'marker') ? mark++ : '';

        map.removeControl(drawControl);
        drawControl.setDrawingOptions({
          polyline: {
            showLength: false,
            shapeOptions: {
              className: 'route',
              showMeasurements: true,
              color: colours[ poly % colours.length],
              weight: 10
            }
          },
          marker: {
            icon: new L.DivIcon({
              iconAnchor: [10, 35], // point of the icon which will correspond to marker's location
              className: 'markerClass',
              html: '<div style="position:relative; text-align:center; width: 24px;"><div style="position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%); color: white;">' + String.fromCharCode(65 + mark ) + '</div><img src="/assets/marker.svg" style="width:100%""></div>'
            })
          }
        });
        map.addControl(drawControl);
      });

      <% if @current_user.is_master? %>
        // Debug coords
        map.on('click', function(e){
          var coord = e.latlng;
          var lat = coord.lat;
          var lng = coord.lng;
          console.log("You clicked the map at latitude: " + lat + " and longitude: " + lng);
        });

        // Debug grid

        L.GridLayer.GridDebug = L.GridLayer.extend({
          createTile: function (coords) {
            const tile = document.createElement('div');
            tile.style.outline = '1px solid green';
            tile.style.fontWeight = 'bold';
            tile.style.fontSize = '14pt';
            tile.innerHTML = [coords.z, coords.x, coords.y].join('/');
            return tile;
          },
        });

        L.gridLayer.gridDebug = function (opts) {
          return new L.GridLayer.GridDebug(opts);
        };

        map.addLayer(L.gridLayer.gridDebug());

        // Debug coords
        map.on('click', function(e){
          var coord = e.latlng;
          var lat = coord.lat;
          var lng = coord.lng;
          console.log("You clicked the map at latitude: " + lat + " and longitude: " + lng);
        });
      <% end %>

      $('#map-container').data('loaded', true);
  }
}
});
