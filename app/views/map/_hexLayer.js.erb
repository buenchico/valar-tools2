// Generating Hex Grid, not in use

function generateHexGrid(bounds, sideLength) {
  const hexagons = [];

  const minX = bounds[0][1];
  const minY = bounds[0][0];
  const maxX = bounds[1][1];
  const maxY = bounds[1][0];

  const hexWidth = sideLength * 2;
  const hexHeight = Math.sqrt(3) * sideLength;

  const horizontalSpacing = hexWidth * 0.75;
  const verticalSpacing = hexHeight;

  const numRows = (bounds[1][0] / verticalSpacing);
  const numCols = (bounds[1][1] / horizontalSpacing);

  let rowOffset = 0;
  let colOffset = 0;

  for (let row = 0; row < numRows; row++) {

    for (let col = 0; col < numCols; col++) {
      if (col % 2 === 1) {
        rowOffset = hexHeight / 2;
      } else {
        rowOffset = 0;
      }

      const x = minX + col * horizontalSpacing + colOffset;
      const y = minY + row * verticalSpacing + rowOffset;

      const hexagon = {
        type: 'Feature',
        geometry: {
          type: 'MultiPolygon',
          coordinates: [
            [
              [
                [x - (0.5 * hexWidth), y],
                [x - (0.25 * hexWidth), y - (0.5 * hexHeight)],
                [x + (0.25 * hexWidth), y - (0.5 * hexHeight)],
                [x + (0.5 * hexWidth), y],
                [x + (0.25 * hexWidth), y + (0.5 * hexHeight)],
                [x - (0.25 * hexWidth), y + (0.5 * hexHeight)]
              ]
            ]
          ]
        }
      };

      hexagons.push(hexagon);
    }
  }


  return hexagons;
}

function getZoomCompensatedStyle() {
  const zoom = map.getZoom();

  let weight

  if (zoom >= 0) {
    weight = Math.pow(2, zoom); // Normal growth
  } else {
    weight = (1 / (Math.abs(zoom))); // Slower decay
  }

  return {
    color: 'rgba(0,0,0,0.3)',
    weight: weight
  };
}

const hexGrid = generateHexGrid(bounds, sideLength);

const jsonHex = {
  type: 'FeatureCollection',
  name: 'hex',
  crs: {
    type: 'name',
    properties: {
      name: 'urn:ogc:def:crs:OGC:1.3:CRS84'
    }
  },
  features: hexGrid
};

map.createPane('hexLayer');
map.getPane('hexLayer').style.zIndex = 300;

var hexLayer = new L.geoJson(jsonHex, {
  pane: 'hexLayer',
  interactive: false,
  renderer: L.canvas(),
  style: getZoomCompensatedStyle
});

map.addLayer(hexLayer);

map.on('zoomend', function () {
  hexLayer.setStyle(getZoomCompensatedStyle);
});
